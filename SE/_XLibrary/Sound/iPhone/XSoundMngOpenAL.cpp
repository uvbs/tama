#ifdef WIN32#include "stdafx.h"#endif#include <stdio.h>#include <assert.h>#include <list>#include "XSoundMngOpenAL.h"#include "XOpenAL.h"#include "path.h"using namespace XE;//------------------------------------------------------------------------------------------------------------XSoundMngOpenAL::XSoundMngOpenAL(){	m_pOpenAL = new XOpenAL;	m_pBGMusic = NULL;}//------------------------------------------------------------------------------------------------------------#include "AVAudio.h"XSoundMngOpenAL::~XSoundMngOpenAL(){	RemoveAll();	SAFE_DELETE( m_pOpenAL );	SAFE_DELETE( m_pBGMusic );	AVDestroy();}//------------------------------------------------------------------------------------------------------------BOOL XSoundMngOpenAL::OpenBGMusic( const char* _filename, BOOL repeat){	    char filename[1024];    sprintf( filename, "%s.mp3", _filename );	strcpy_s(m_szBGMFilename, _filename);	AVLoad( XE::MakePath( DIR_BGM, filename ), repeat );	return 1;	            if(!m_pOpenAL)return -1;	if (m_pBGMusic != NULL) {		m_pBGMusic->Stop();		SAFE_DELETE( m_pBGMusic );	}    CONSOLE("OpenBGM:%s", filename );	m_pBGMusic = new XOALObj( XE::MakePath( DIR_BGM, filename ) );	if(m_pBGMusic == NULL)		return FALSE;	m_pBGMusic->SetRepeat(repeat);    m_BGMVolumeTemp = m_BGMVolume;       	return TRUE;}//------------------------------------------------------------------------------------------------------------void XSoundMngOpenAL::SetBGMVolume(float volume){		AVSetVolume( volume );	return;	if(!m_pOpenAL) return;	XSoundMng::SetBGMVolume( volume );	m_pBGMusic->SetVolume( volume );}//------------------------------------------------------------------------------------------------------------void XSoundMngOpenAL::PlayBGMusic(){	AVPlay();	return;	if( !m_pOpenAL )		return;	if (m_bMuteBGM == FALSE && m_pBGMusic != NULL)		m_pBGMusic->Play();}//------------------------------------------------------------------------------------------------------------void XSoundMngOpenAL::StopBGMusic(){	AVStop();	return;	if(!m_pOpenAL) return;	if( m_pBGMusic == NULL ) return;	m_pBGMusic->Stop();	SAFE_DELETE( m_pBGMusic );}//------------------------------------------------------------------------------------------------------------void XSoundMngOpenAL::FadeOutBGM( float fLevel){//	if(!m_pOpenAL) return;	if( m_pBGMusic == NULL )	return;          	XSoundMng::FadeOutBGM( fLevel );	m_pBGMusic->SetVolume( m_BGMVolumeTemp );}//------------------------------------------------------------------------------------------------------------BOOL XSoundMngOpenAL::IsBGMusic( void ){		if (m_pBGMusic != NULL ) return TRUE;	return FALSE;}//------------------------------------------------------------------------------------------------------------BOOL XSoundMngOpenAL::OpenSound( int FileID ){		if( m_pOpenAL == NULL )		return FALSE;	// 중복 사운드를 찾음.	Sound_Itor it = m_SoundList.begin();	while(it != m_SoundList.end())	{	    if ( (*it)->FileID == FileID)		{			(*it)->Use++;			return TRUE;		}		it++;	}    ST_SOUND *pSound;	pSound = new ST_SOUND;	pSound->Sound = NULL;	char filename[100];	sprintf(filename, "%04d.wav", FileID);	pSound->Sound = new XOALObj( MakePath( DIR_SND, filename) );	if (pSound->Sound != NULL)	{		pSound->FileID = FileID;	    pSound->Use  =  1;		m_SoundList.push_back(pSound);		return TRUE;	}	if (pSound != NULL)		delete pSound;	return FALSE;}//------------------------------------------------------------------------------------------------------------void XSoundMngOpenAL::CloseSound(int FileID){	if( m_pOpenAL == NULL )		return;    ST_SOUND *pSound;	pSound = NULL;    Sound_Itor it = m_SoundList.begin();	while(it != m_SoundList.end())	{	    if ((*it)->FileID == FileID) 		{		    pSound = (*it);		    break;		}		it++;	}	    //	if (pSound != NULL)	{        pSound->Use--;		if(pSound->Use == 0)		{			m_SoundList.erase(it);			SAFE_DELETE( pSound->Sound );			delete pSound;			pSound = NULL;		}	}	}//------------------------------------------------------------------------------------------------------------void XSoundMngOpenAL::PlaySound(int FileID){		if( m_pOpenAL == NULL ) return;	if (m_bMuteSound) return;	Sound_Itor it = m_SoundList.begin();	while(it != m_SoundList.end()) {	    if ((*it)->FileID == FileID)		{		    //			(*it)->Sound->SetVolume( m_SoundVolume );			(*it)->Sound->Play();			break;		}		it++;	}}void XSoundMngOpenAL::StopSound( int FileID ){	if( m_pOpenAL == NULL ) return;	if (m_bMuteSound) return;		Sound_Itor it = m_SoundList.begin();	while(it != m_SoundList.end()) {	    if ((*it)->FileID == FileID)		{		    			(*it)->Sound->Stop();			break;		}		it++;	}	}//------------------------------------------------------------------------------------------------------------void XSoundMngOpenAL::RemoveAll(){		if( m_pOpenAL == NULL ) return;      ST_SOUND *pSound;   pSound = NULL;//   for(Sound_Itor itor = m_SoundList.begin(); itor != m_SoundList.end(); ++itor )   for(Sound_Itor itor = m_SoundList.begin(); itor != m_SoundList.end(); )   {	   pSound = (*itor);	   m_SoundList.erase(itor++);//	   itor = m_SoundList.begin();	   if (pSound != NULL) 	   {		   pSound->Sound->Stop();		   SAFE_DELETE( pSound->Sound );		   delete pSound;		   pSound = NULL;	   }   }   }